.\" Copyright (c) 2005 Stijn van Dongen
.TH "mcl" 1 "31 Mar 2005" "mcl 1\&.004, 05-090" "USER COMMANDS"
.po 2m
.de ZI
.\" Zoem Indent/Itemize macro I.
.br
'in +\\$1
.nr xa 0
.nr xa -\\$1
.nr xb \\$1
.nr xb -\\w'\\$2'
\h'|\\n(xau'\\$2\h'\\n(xbu'\\
..
.de ZJ
.br
.\" Zoem Indent/Itemize macro II.
'in +\\$1
'in +\\$2
.nr xa 0
.nr xa -\\$2
.nr xa -\\w'\\$3'
.nr xb \\$2
\h'|\\n(xau'\\$3\h'\\n(xbu'\\
..
.if n .ll -2m
.am SH
.ie n .in 4m
.el .in 8m
..
.SH NAME
mcl \- The Markov Cluster Algorithm, aka the MCL algorithm\&.
.SH SYNOPSIS

\fBmcl\fP <-|fname>
\fB[-I\fP f (\fIinflation\fP)\fB]\fP
\fB[-o\fP str (\fIfname\fP)\fB]\fP
\fB[-scheme\fP k (\fIresource scheme\fP)\fB]\fP

These options are sufficient in 95 percent of the cases or more\&. The first
argument must be the name of a file containing a graph/matrix in the mcl
input format, or a hyphen to read from STDIN\&. With respect to clustering,
only the \fB-I\fP option and
\fB-scheme\fP option are relevant and the rest is
immaterial\&.

As of the first 1\&.002 release, \fBmcl\fP will accept a very general input format\&.
Graph indices no longer need be sequential; you can use any set of indices
you like, as long as they are in a suitable range\&. Refer to the \fBmcxio(5)\fP
section, and use \fCmcl\ -z\fR to find the range from which indices can be
picked\&.

As of the first 1\&.003 release, \fBclmformat\fP enables you to map a
clustering onto a format better suited for inspection, using an index file
(the so called \fItab file\fP) mapping mcl indices onto descriptive labels\&.
Read the \fBclmformat manual\fP for more information -
it is simple to use and the manual is small\&.

A mechanism for pipelines is supported (as of the first 1\&.003 release)\&.
Refer to the \fBPIPELINES\fP section for more information\&.
A prepackaged pipeline for BLAST data is present in the form of
\fBmclblastline\fP\&.

The full listing of \fBmcl\fP options is shown below, separated
into parts corresponding with functional aspects such
as clustering, threading, verbosity, pruning and resource management,
automatic output naming, and dumping\&.
The \fB-scheme\fP parameter provides a single access point to the
pruning options, and should be sufficient in most cases\&.
\fBmcl\fP allows comprehensive tuning and access to its internals
for those who are interested, so it has many options\&.

\fBBaseline clustering options\fP
.br
\fB[-I\fP f (\fIinflation\fP)\fB]\fP
\fB[-o\fP str (\fIfname\fP)\fB]\fP
\fB[-scheme\fP k (\fIresource scheme\fP)\fB]\fP

\fBAdditional clustering options\fP
.br
\fB[-l\fP n (\fIinitial iteration number\fP)\fB]\fP
\fB[-L\fP n (\fImain iteration number\fP)\fB]\fP
\fB[-i\fP f (\fIinitial inflation\fP)\fB]\fP

\fBInput manipulation options\fP
.br
\fB[-c\fP f (\fIcentering\fP)\fB]\fP
\fB[-pi\fP f (\fIpre-inflation\fP)\fB]\fP
\fB[-pp\fP n (\fIpreprune count\fP)\fB]\fP
\fB[-in-gq\fP f (\fIfilter threshold\fP)\fB]\fP

\fBAlternative modes\fP
.br
\fB[--expand-only\fP (\fIfactor out computation\fP)\fB]\fP
\fB[--inflate-first\fP (\fIrather then expand\fP)\fB]\fP

\fBClustering result options\fP
.br
\fB[-sort\fP str (\fIsort mode\fP)\fB]\fP
\fB[--keep-overlap=\fPy/n (\fIretain overlap\fP)\fB]\fP
\fB[--output-limit=\fPy/n (\fIwrite limit matrix\fP)\fB]\fP
\fB[--force-connected=\fPy/n (\fIanalyze components\fP)\fB]\fP
\fB[--check-connected=\fPy/n (\fIanalyze components\fP)\fB]\fP
\fB[--analyze=\fPy/n (\fIperformance criteria\fP)\fB]\fP
\fB[--show-log=\fPy/n (\fIshow log\fP)\fB]\fP
\fB[--append-log=\fPy/n (\fIappend log\fP)\fB]\fP

\fBVerbosity options\fP
.br
\fB[-v\fP str (\fIverbosity type on\fP)\fB]\fP
\fB[-V\fP str (\fIverbosity type off\fP)\fB]\fP
\fB[--silent\fP (\fIvery\fP)\fB]\fP
\fB[--verbose\fP (\fIvery\fP)\fB]\fP
\fB[-progress\fP k (\fIgauge\fP)\fB]\fP
\fB[--show\fP (\fIprint (small) matrices to screen\fP)\fB]\fP

\fBThread options\fP
.br
\fB[-te\fP k (\fI#expansion threads\fP)\fB]\fP
\fB[-ti\fP k (\fI#inflation threads\fP)\fB]\fP
\fB[-t\fP k (\fI#threads\fP)\fB]\fP
\fB[--clone\fP (\fIwhen threading (experimental)\fP)\fB]\fP
\fB[-cloneat\fP n (\fItrigger\fP)\fB]\fP

\fBOutput file name options\fP
.br
\fB[-o\fP str (\fIfname\fP)\fB]\fP
\fB[-ap\fP str (\fIuse str as file name prefix\fP)\fB]\fP
\fB[-aa\fP str (\fIappend str to suffix\fP)\fB]\fP
\fB[-az\fP (\fIshow output file name and exit\fP)\fB]\fP
\fB[-ax\fP (\fIshow output suffix and exit\fP)\fB]\fP

\fBDump options\fP
.br
\fB[-dump-interval\fP i:j (\fIdump interval\fP)\fB]\fP
\fB[-dump-modulo\fP k (\fIdump modulo\fP)\fB]\fP
\fB[-dump-stem\fP stem (\fIdump file stem\fP)\fB]\fP
\fB[-dump\fP str (\fItype\fP)\fB]\fP
\fB[-dump-subi\fP spec (\fIindex list for submatrix dump\fP)\fB]\fP
\fB[-dump-subd\fP spec (\fIdomain list for submatrix dump\fP)\fB]\fP
\fB[-dump-dom\fP fname (\fIdomain matrix file\fP)\fB]\fP
\fB[-digits\fP n (\fIprinting precision\fP)\fB]\fP

\fBInfo options\fP
.br
\fB[--jury-charter\fP (\fIexplains jury\fP)\fB]\fP
\fB[--version\fP (\fIshow version\fP)\fB]\fP
\fB[-how-much-ram\fP k (\fIRAM upper bound\fP)\fB]\fP
\fB[-h\fP (\fImost important options\fP)\fB]\fP
\fB[--apropos\fP (\fIone-line description for all options\fP)\fB]\fP
\fB[-z\fP (\fIshow current settings\fP)\fB]\fP
\fB[-az\fP (\fIshow output file name and exit\fP)\fB]\fP
\fB[-ax\fP (\fIshow output suffix and exit\fP)\fB]\fP
\fB[--show-schemes\fP (\fIshow resource schemes\fP)\fB]\fP

\fBPruning options\fP
.br
The following options all pertain to the various pruning strategies that can
be employed by \fBmcl\fP\&. They are described in the \fBPRUNING OPTIONS\fP
section, accompanied by a description of the mcl pruning strategy\&.
If your graphs are huge
and you have an appetite for tuning, have a look at the following:

\fB[-p\fP f (\fIcutoff\fP)\fB]\fP
\fB[-P\fP n (\fI1/cutoff\fP)\fB]\fP
\fB[-S\fP n (\fIselection number\fP)\fB]\fP
\fB[-R\fP n (\fIrecovery number\fP)\fB]\fP
\fB[-pct\fP f (\fIrecover percentage\fP)\fB]\fP
\fB[-my-scheme\fP n (\fItag custom scheme\fP)\fB]\fP
\fB[-warn-pct\fP n (\fIprune warn percentage\fP)\fB]\fP
\fB[-warn-factor\fP n (\fIprune warn factor\fP)\fB]\fP
\fB[--dense\fP (\fIallow matrices to fill\fP)\fB]\fP
\fB[--adapt\fP (\fIpruning\fP)\fB]\fP
\fB[--rigid\fP (\fIpruning\fP)\fB]\fP
\fB[-ae\fP f (\fIadaptive pruning exponent\fP)\fB]\fP
\fB[-af\fP f (\fIadaptive pruning factor\fP)\fB]\fP
\fB[-nx\fP x (\fIx window index\fP)\fB]\fP
\fB[-ny\fP y (\fIy window index\fP)\fB]\fP
\fB[-nj\fP j (\fIjury window index\fP)\fB]\fP
\fB[-nw\fP w (\fInr of windows\fP)\fB]\fP
\fB[-nl\fP w (\fInr of iterations\fP)\fB]\fP
\fB[--thick\fP (\fIexpect dense input graph\fP)\fB]\fP

The first argument of \fBmcl\fP must be a file name, but some options are allowed
to appear as the first argument instead\&. These are the options that cause
mcl to print out information of some kind, after which it will gracefully
exit\&. The full list of these options is

\fB-z\fP,
\fB-h\fP,
\fB--apropos\fP,
\fB--version\fP,
\fB--show-settings\fP,
\fB--show-schemes\fP,
\fB--jury-charter\fP,
\fB-how-much-ram\fP\ \fIk\fP\&.
.SH DESCRIPTION

\fBmcl\fP implements the \fBMCL algorithm\fP, short for the \fBMarkov cluster
algorithm\fP, a cluster algorithm for graphs developed by Stijn van Dongen at
the Centre for Mathematics and Computer Science in Amsterdam, the
Netherlands\&. The algorithm simulates flow using two simple algebraic
operations on matrices\&.
The inception of this flow process and the theory behind it are
described elsewhere (see \fBREFERENCES\fP)\&. Frequently asked questions
are answered in the \fBmclfaq(7)\fP section\&.
The program described here is a fast threaded implementation written by the
algorithm\&'s creator with contributions by several others\&. Anton Enright
co-implemented threading; see the \fBHISTORY/CREDITS\fP section for a complete
account\&.
See the \fBAPPLICABILITY\fP section for a description of the type of
graph mcl likes best, and for a qualitative assessment of its speed\&.
\fBmcl\fP is accompanied by several other utilities for analyzing clusterings and
performing matrix and graph operations; see the \fBSEE ALSO\fP section\&.

The first argument is the input file name (see the \fBmcxio(5)\fP section for its
expected format), or a single hyphen to read from stdin\&. The rationale for
making the name of the input file a fixed parameter is that you typically do
several runs with different parameters\&. In command line mode it is
pleasant if you do not have to skip over an immutable parameter all the
time\&.

The \fB-I\fP\ \fIf\fP option is the main control,
affecting cluster granularity\&. Using \fBmcl\fP is as simple as
typing (assuming a file \fIproteins\fP contains a matrix/graph
in mcl input format)

.di ZV
.in 0
.nf \fC
mcl proteins -I 2\&.0
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

The above will result in a clustering written to the file
named \fIout\&.proteins\&.I20s2\fP\&. It is - of course -
possible to explicitly specify the name of the output file
using the \fB-o\fP\ \fIoption\fP\&. Refer to the
\fB-ap\fP\ \fIoption\fP for a description of mcl\&'s procedure
in automatically constructing file names from it parameters\&.

The \fBmcl\fP input format is described in the
\fBmcxio(5)\fP section\&. Clusterings are also stored as matrices
- this is again discussed in the \fBmcxio(5)\fP section\&.
You presumably want to convert the output to something that
is easier to interpret\&. The mcl matrix format is perhaps
unpleasant to parse in the quick and dirty way\&. You can use

.di ZV
.in 0
.nf \fC
clmformat -icl <mcl-out-file> -dump -
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

to convert mcl output to a line/tab based format, where
each lines contains a cluster in the form of tab-separated
indices\&. If you throw in the \fC-tab\ <tab-file>\fR
option, you can get tab-separated labels\&. Refer to
the \fBclmformat manual\fP page for more information\&.

In finding good \fBmcl\fP parameter settings for a particular domain,
or in finding cluster structure at different levels of granularity,
one typically runs mcl multiple times for varying values of f (refer
to the \fB-I\fP\ \fIoption\fP for further information)\&.

\fBmcl\fP expects a nonnegative matrix in the input file, or equivalently, a
weighted (possibly directed) graph\&. NOTE \- mcl interprets the matrix
entries or graph edge weights as \fBsimilarities\fP, and it likes
\fBundirected input graphs\fP best\&. It can handle directed graphs, but any
node pair (i,j) for which w(i,j) is much smaller than w(j,i) or vice versa
will presumably have a slightly negative effect on the clusterings output by
mcl\&. Many such node pairs will have a distinctly negative effect, so try to
make your input graphs undirected\&. How your edge weights are computed may
affect mcl\&'s performance\&. In protein clustering, one way to go is to
choose the negated logarithm of the BLAST probabilities (see
\fBREFERENCES\fP)\&.

\fBmcl\fP\&'s default parameters should make it quite fast under almost all
circumstances\&. Taking default parameters, mcl has been used to generate
good protein clusters on 133k proteins, taking 10 minutes running time on a
Compaq ES40 system with four alpha EV6\&.7 processors\&. It has been applied
(with good results) to graphs with 800k nodes, and if you have the memory
(and preferably CPUs as well) nothing should stop you from going further\&.

For large graphs, there are several groups of parameters available for
tuning the mcl computing process, should it be necessary\&. The easiest thing
to do is just vary the \fB-scheme\fP option\&. This
triggers different settings for the group of pruning parameters
\fB{\fP\fB-p/-P\fP, \fB-R\fP, \fB-S\fP, and
\fB-pct\fP\fB}\fP\&. The default setting corresponds with
\fB-scheme\fP\ \fB4\fP\&.
There is an additional group of control parameters
\fB{\fP\fB--adapt\fP, \fB--rigid\fP, \fB-ae\fP,
\fB-af\fP\fB}\fP, which may be helpful in speeding up \fBmcl\fP\&.
When doing multiple mcl runs for the same graphs with different
\fB-I\fP settings (for obtaining clusterings at different levels
of granularity), it can be useful to factor out the first bit
of computation that is common to all runs, by using
the \fB--expand-only\fP option one time
and then using \fB--inflate-first\fP for
each run in the set\&.
Whether mcl considers a graph large depends mainly on the graph
connectivity; a highly connected graph on 50,000 nodes is large to
mcl (so that you might want to tune resources) whereas a sparsely
connected graph on 500,000 nodes may be business as usual\&.

\fBmcl\fP is a memory munger\&. Its precise appetite depends on the resource
settings\&. You can get a rough (and usually much too pessimistic) upper
bound for the amount of RAM that is needed by using the
\fB-how-much-ram\fP option\&. The corresponding
entry in this manual page contains the simple formula via which the upper
bound is computed\&.

Two other groups of interest are the thread-related
options (you can specify the number of threads to use)
\fB{\fP\fB-t\fP, \fB-te\fP, \fB-ti\fP,
\fB--clone\fP, \fB-cloneat\fP\fB}\fP
and the verbosity-related options
\fB{\fP\fB--verbose\fP, \fB--silent\fP, \fB-v\fP,
\fB-V\fP\fB}\fP\&.
The actual settings are shown with \fB-z\fP, and for graphs with
at most 12 nodes or so you can view the MCL matrix iterands on screen
by supplying \fB--show\fP (this may give some
more feeling)\&.

MCL iterands allow a generic interpretation as clusterings as well\&. The
clusterings associated with early iterands may contain a fair amount of
overlap\&. Refer to the \fB-dump\fP option, the \fBmclfaq(7)\fP
manual, and the \fBclmimac\fP utility (Interpret Matrices As Clusterings)\&.
Use \fBclmimac\fP only if you have a special reason; the normal usage of \fBmcl\fP is
to do multiple runs for varying \fB-I\fP parameters and use the
clusterings output by mcl itself\&.

Under very rare circumstances, \fBmcl\fP might get stuck in a seemingly infinite
loop\&. If the number of iterations exceeds a hundred and the \fIchaos\fP
indicator remains nearly constant (presumably around value 0\&.37), you can
force mcl to stop by sending it the ALRM signal (usually done
by \fBkill -s ALRM\fP \fIpid\fP)\&. It will finish the current
iteration, and interpret the last iterand a clustering\&. Alternatively, you
can wait and mcl might converge by itself or it will certainly stop after
10,000 iterations (the default value for the \fB-L\fP\ \fIoption\fP)\&. The
most probable explanation for such an infinite loop is that the input graph
contains the flip-flop graph of node size three as a subgraph\&.

The creator of this page feels that manual pages are a valuable resource,
that online html documentation is also a good thing to have, and
that info pages are way \fIway\fP ahead of their time\&. The
\fBNOTES\fP section explains how this page was created\&.

In the \fBOPTIONS\fP section options are listed in order of
importance, with related options grouped together\&.
.SH OPTIONS

.ZI 3m "\fB-I\fP f (\fIinflation\fP)"
\&
.br
Sets the main inflation value to f\&. This value is the main handle
for affecting cluster granularity\&. It is usually chosen somewhere
in the range [1\&.2-5\&.0]\&. \fB-I\fP\ \fB5\&.0\fP will tend to result
in fine-grained clusterings, and \fB-I\fP\ \fB1\&.2\fP will tend to
result in very coarse grained clusterings\&. Your mileage will vary
depending on the characteristics of your data\&. That is why it is
a good idea to test the quality and coherency of your clusterings
using \fBclmdist\fP and \fBclminfo\fP\&. This will most likely reveal that
certain values of \fB-I\fP are simply not right for your data\&. The
\fBclmdist\fP section contains a discussion of how to use the cluster
validation tools shipped with \fBmcl\fP (see the \fBSEE ALSO\fP section)\&.

A second option for affecting cluster granularity is the
\fB-c\fP option\&.
It may possibly increase granularity\&.

With low values for \fB-I\fP, like \fB-I\fP\ \fB1\&.2\fP, you should be
prepared to use more resources in order to maintain quality of
clusterings, i\&.e\&. increase the argument to the
\fB-scheme\fP option\&.
.in -3m

.ZI 3m "\fB-o\fP str (\fIfname\fP)"
\&
.br
Output the clustering to file named fname\&.
It is possible to send the clustering to stdout
by supplying \fB-o\fP\ \fB-\fP\&. The clustering is output in the
mcl matrix format; see the \fBmcxio(5)\fP section for
more information on this\&.

Look at the \fB-ap\fP\ \fIoption and its siblings\fP for the automatic
naming constructions employed by \fBmcl\fP if the \fB-o\fP option is not
used\&.
.in -3m

.ZI 3m "\fB-scheme\fP k (\fIuse a preset resource scheme\fP)"
\&
.br
There are currently seven different resource schemes, indexed 1\&.\&.7\&.
High schemes result in more expensive computations that may possibly be
more accurate\&. The default scheme is 4\&. When \fBmcl\fP is done, it will give a
grade (the so called \fIjury synopsis\fP) to the appropriateness of the
scheme used\&. \fIA low grade does not necessarily imply that the
resulting clustering is bad\fP - but anyway, a low grade should be reason
to try for a higher scheme\&. The grades are listed in the
\fBPRUNING OPTIONS\fP section under the
\fB-nj\fP option\&.

The \fBPRUNING OPTIONS\fP section contains an elaborate description
of the way \fBmcl\fP manages resources, should you be interested\&.
In case you are worried about the validation of the resulting
clusterings, the \fBmclfaq(7)\fP section
has several entries discussing this issue\&. The bottom line is
that you have to compare the clusterings resulting from different
schemes (and otherwise identical parameters) using utilities
such as \fBclmdist\fP, \fBclminfo\fP on the one hand, and your
own sound judgment on the other hand\&.

If your input graph is extremely dense, with an average node degree
(i\&.e\&. the number of neighbours per node) that is somewhere above
500, you may need to filter the input graph by removing the nodes
of highest degree (and projecting them back onto the resulting
clustering afterwards) or by using the
\fB-pp\fP option\&.
.in -3m

.ZI 3m "\fB--show-schemes\fP (\fIshow preset resource schemes\fP)"
\&
.br
Shows the explicit settings to which the different preset schemes
correspond\&.

The characteristics are written in the same format (more or less) as
the output triggered by \fB-v\fP\ \fBpruning\fP\&.
.in -3m

.ZI 3m "\fB-c\fP f (\fIcentering\fP)"
\&
.br
The larger the value of f the more nodes are attached to themselves
rather than their neighbours, the more expansion (the spreading
of flow through the graph) is opposed, and the more fine-grained
clusterings tend to be\&. f should be chosen greater than or equal
to 1\&.0\&. The default is f=1\&.0\&. This option has a much weaker
effect than the \fB-I\fP option, but it can be useful depending
on your data\&.
.in -3m

.ZI 3m "\fB-v\fP str (\fIverbosity type on\fP)"
\&
.br
See the \fB--verbose\fP option below\&.
.in -3m

.ZI 3m "\fB-V\fP str (\fIverbosity type off\fP)"
\&
.br
See the \fB--verbose\fP option below\&.
.in -3m

.ZI 3m "\fB--silent\fP (\fIvery\fP)"
\&
.br
See the \fB--verbose\fP option below\&.
.in -3m

.ZI 3m "\fB--verbose\fP (\fIvery\fP)"
\&
.br
These are the different verbosity modes:

\fBprogress\fP
.br
\fBpruning\fP
.br
\fBexplain\fP
.br
\fBall\fP

where \fIall\fP means all three previous modes\&.
\fB--verbose\fP and \fB-v\fP\ \fBall\fP
turn them all on, \fB--silent\fP and \fB-V\fP\ \fBall\fP
turn them all off\&. \fB-v\fP\ \fIstr\fP and \fB-V\fP\ \fIstr\fP
turn on/off the single mode \fIstr\fP (for \fIstr\fP
equal to one of \fBprogress\fP, \fBpruning\fP, or \fBexplain\fP)\&.
Each verbosity mode is given its own entry below\&.
.in -3m

.ZI 3m "\fB-v\fP\ \fBprogress\fP"
\&
.br
This mode causes \fBmcl\fP to emit an ascii gauge
for each single matrix multiplication\&. It uses some
default length for the gauge, which can be altered by
the \fB-progress\fP\ \fIk\fP option\&. Simply using the latter
will also turn on this verbosity mode\&.
This mode can give you quickly an idea how long an mcl
run might take\&. If you use threading
(see the \fB-t\fP option and its friends),
this option may slow down the program a little (relative to
\fB-V\fP\ \fBprogress\fP, not relative to a single-CPU mcl run)\&.
.in -3m

.ZI 3m "\fB-v\fP\ \fBexplain\fP"
\&
.br
This mode causes the output of explanatory headers illuminating the
output generated with the \fBpruning\fP verbosity mode\&.
.in -3m

.ZI 3m "\fB-v\fP\ \fBpruning\fP"
\&
.br
This mode causes output of resource-related quantities\&. It has
a separate entry in the PRUNING OPTIONS section\&.
.in -3m

.ZI 3m "\fB-progress\fP k (\fIgauge\fP)"
\&
.br
If k>0 then for each matrix multiplication \fBmcl\fP will print an
ascii gauge telling how far it is\&. The gauge will be (in some
cases approximately) k characters long\&. If k<0 then mcl will
emit a gauge that is extended by one character after every |k|
vectors computed\&. For large graphs, this option has been known
to ease the pain of impatience\&. If k=0 then mcl will print a
message only after every matrix multiplication, and not during
matrix multiplication\&. This can be useful when you want mcl to be
as speedy as possible, for example when using parallellized mode
(as monitoring progress requires thread communication)\&.
For parallellization (by threading) see the
\fB-t\fP option\&.
.in -3m

.ZI 3m "\fB-aa\fP str (\fIappend str to suffix\fP)"
\&
.br
See the \fB-ap\fP option below\&.
.in -3m

.ZI 3m "\fB-ap\fP str (\fIuse str as file name prefix\fP)"
\&
.br
If the \fB-o\fP\ \fIoption\fP is not used,
\fBmcl\fP will create a file name (for writing output to) that
should uniquely characterize the important parameters used in the
current invocation of mcl\&. The default format is \fBout\&.fname\&.suf\fP,
where \fBout\fP is simply the literal string \fCout\fR, \fBfname\fP is the
first argument containing the name of the file (with the graph) to be
clustered, and where \fBsuf\fP is the suffix encoding a set of parameters
(described further below)\&.

The \fB-ap\fP\ \fIstr\fP option specifies a prefix to use
rather than \fBout\&.fname\fP as sketched above\&.
However, \fBmcl\fP will interpret the character \&'=\&', if present
in \fIstr\fP, as a placeholder for the input file name\&.

If the \fB-aa\fP\ \fIstr\fP option is used, \fBmcl\fP will append
\fBstr\fP to the suffix \fBsuf\fP created by itself\&.
You can use this if you need to encode some extra information in the
file name suffix\&.

The suffix is constructed as follows\&. The \fB-I\fP\ \fIf\fP
and \fB-scheme\fP parameter are always encoded\&.
The \fB-pi\fP\ \fIf\fP, \fB-l\fP\ \fIk\fP, \fB-i\fP\ \fIf\fP, and \fB-c\fP\ \fIf\fP
options are only encoded if they are used\&. Any real argument \fIf\fP
is encoded using \fIexactly one\fP trailing digit behind the decimal
separator (which itself is not written)\&. The setting \fB-I\fP\ \fB3\&.14\fP
is thus encoded as I31\&. The \fB-scheme\fP option is encoded using the
letter \&'s\&', all other options mentioned here are encoded as themselves
(stripped of the hyphen)\&. For example

.di ZV
.in 0
.nf \fC
mcl small\&.mci -I 3 -c 2\&.5 -pi 0\&.8 -scheme 5
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

results in the file name \fCout\&.small\&.mci\&.I30s5c25pi08\fR\&.
If you want to know beforehand what file name will be produced,
use the \fB-az\fP option\&.
.in -3m

.ZI 3m "\fB-az\fP (\fIshow output file name and exit\fP)"
\&
'in -3m
.ZI 3m "\fB-ax\fP (\fIshow output suffix and exit\fP)"
\&
'in -3m
'in +3m
\&
.br
If \fBmcl\fP automatically constructs a file name, it can be helpful to known
beforehand what that file name will be\&. Use \fB-az\fP and mcl will
write the file name to STDOUT and exit\&. This can be used if mcl is
integrated into other software for which the automatic creation of
unique file names is convenient\&.

By default MCL incorporates the input file name into the output file
name and appends a short suffix describing the most important
option settings\&. Use \fB-ax\fP to find out what that suffix is\&.
This can be useful in wrapper pipeline scripts such as clxcoarse\&.
.in -3m

.ZI 3m "\fB-te\fP k (\fI#expansion threads\fP)"
\&
.br
See the \fB-t\fP\ \fIk\fP option below\&.
.in -3m

.ZI 3m "\fB-ti\fP k (\fI#inflation threads\fP)"
\&
.br
See the \fB-t\fP\ \fIk\fP option below\&.
.in -3m

.ZI 3m "\fB--clone\fP (\fIwhen threading\fP)"
\&
.br
See the \fB-t\fP\ \fIk\fP option below\&.
.in -3m

.ZI 3m "\fB-cloneat\fP n (\fItrigger\fP)"
\&
.br
See the \fB-t\fP\ \fIk\fP option below\&.
.in -3m

.ZI 3m "\fB-t\fP k (\fI#threads\fP)"
\&
.br
The \fB-t\fP options are self-explanatory\&. Note that threading
inflation is hardly useful, as inflation is orders of magnitude
faster than expansion\&. Also note that threading is only useful
if you have a multi-processor system\&.

The \fB--clone\fP
option says to give each thread its own copy of the matrix being
expanded/squared\&. The latter option can be further controlled
using the \fB--cloneat\fP\ \fIk\fP option\&. Copies are only made if
the source matrix (the one to be squared) has on average at least
k positive entries per vector\&. This option is probably not
very useful, because without it \fBmcl\fP is a memory munger already\&.

When threading, it is best not to turn on pruning verbosity
mode if you are letting mcl run unattended, unless you want to
scrutinize its output later\&. This is because it makes \fBmcl\fP run
somewhat slower, although the difference is not dramatic\&.
.in -3m

.ZI 3m "\fB-l\fP n (\fIinitial iteration number\fP) (small letter ell)"
\&
.br
The number of times \fBmcl\fP will use a different inflation value
before it switches to the (main) inflation given by the \fB-I\fP
(capital eye) option\&. The different value is called \fIinitial
inflation\fP and is tunable using the \fB-i\fP\ \fIf\fP
option (default value f=2\&.0)\&. The default value (to \fB-l\fP)
is zero\&. This option supplies new ways of affecting cluster
granularity, e\&.g\&. by supplying

.di ZV
.in 0
.nf \fC
mcl proteins -i 1\&.4 -l 2 -I 4\&.0
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

one lets expansion prevail during the first two iterations,
followed by inflation catching up (in a figurative way of writing)\&.
This may be useful in certain cases, but this type of experiment
is \fIcertainly secondary\fP to simply varying \fB-I\fP (capital eye)\&.
.in -3m

.ZI 3m "\fB-L\fP n (\fImain iteration number\fP)"
\&
.br
Normally, \fBmcl\fP computes the MCL process until it has converged
fully to a doubly idempotent matrix\&. The number of iterations
required is typically somewhere in the range 10-100\&.
The first few iterations generally take the longest time\&.
The \fB-L\fP option can be used to specify the number of
iterations mcl may do at most\&. When this number is reached,
mcl will output the clustering associated with the iterand
last computed\&.
.in -3m

.ZI 3m "\fB-i\fP f (\fIinitial inflation\fP)"
\&
.br
The inflation value used during the first n iterations,
where n is specified by the \fB-l\fP (ell) option\&.
By default, n=0 and f=2\&.0\&.
.in -3m

.ZI 3m "\fB-pi\fP f (\fIpre-inflation\fP)"
\&
.br
If used, \fBmcl\fP will apply inflation one time to the input graph
before entering the main process\&. This can be useful for
making the edge weights in a graph either more homogeneous (which
may result in less granular clusterings) or more heterogeneous
(which may result in more granular clusterings)\&.
Homogeneity is achieved for values \fIf\fP less than one,
heterogeneity for values larger than one\&.
Values to try are normally in the range \fC[2\&.0,10\&.0]\fR\&.
.in -3m

.ZI 3m "\fB-di\fP i:j (\fIdump interval\fP)"
\&
'in -3m
.ZI 3m "\fB-dump-interval\fP\ \fIi:j\fP"
\&
'in -3m
'in +3m
\&
.br
Dump during iterations i\&.\&.j-1\&. See the \fB-dump\fP\ \fIstr\fP option below\&.
.in -3m

.ZI 3m "\fB-dm\fP k (\fIdump i+0\&.\&.i+k\&.\&.\fP)"
\&
'in -3m
.ZI 3m "\fB-dump-modulo\fP\ \fIk\fP"
\&
'in -3m
'in +3m
\&
.br
Sampling rate: select only these iterations in the dump interval\&.
See the \fB-dump\fP\ \fIstr\fP option below\&.
.in -3m

.ZI 3m "\fB-ds\fP stem (\fIfile stem\fP)"
\&
'in -3m
.ZI 3m "\fB-dump-stem\fP\ \fIstem\fP"
\&
'in -3m
'in +3m
\&
.br
Set the the stem for file names of dumped
objects (default \fImcl\fP)\&. See the \fB-dump\fP\ \fIstr\fP option below\&.
.in -3m

.ZI 3m "\fB-dump-subi\fP spec (\fIindex list for submatrix dump\fP)"
\&
'in -3m
.ZI 3m "\fB-dump-subd\fP spec (\fIdomain list for submatrix dump\fP)"
\&
'in -3m
.ZI 3m "\fB-dump-dom\fP fname (\fIdomain matrix file\fP)"
\&
'in -3m
'in +3m
\&
.br
\fB-dump-subi\fP specifies a range of indices which will be
used to select the extended principal submatrix\&.
Argument \fIspec\fP can be a comma-separated
list of single integers and integer ranges\&. Ranges are denoted by
two integers separated by a hyphen\&.

If \fB-dump-dom\fP is used and specifies a matrix file,
the indices specified in the \fB-dump-subd\fP option should index
columns in that matrix\&. These columns are merged and added to the
list of entries used in selecting the extended principal submatrix\&.
.in -3m

.ZI 3m "\fB-dump\fP str (\fItype\fP)"
\&
.br
\fIstr\fP can be of the following types\&.

\fBite\fP
.br
\fBdag\fP
.br
\fBcls\fP
.br
\fBchr\fP

Repeated use is allowed\&.
The \fBite\fP option writes \fBmcl\fP iterands to file\&. The \fBcls\fP
option writes clusterings associated with mcl iterands to file\&.
These clusters are obtained from a particular directed acyclic graph
(abbreviated as DAG) associated with each iterand\&. The \fBdag\fP option
writes that DAG to file\&. The DAG can optionally be further
pruned and then again be interpreted as a
clustering using \fBclmimac\fP, and \fBclmimac\fP can also
work with the matrices written using the \fBite\fP option\&.
It should be noted that clusterings associated with intermediate
iterands may contain overlap, which is interesting in
many applications\&. For more information
refer to \fBmclfaq(7)\fP and the \fBREFERENCES\fP section below\&.

The \fBchr\fP option says, for each iterand I, to output a matrix C with
characteristics of I\&. C has the same number of columns as I\&. For each
column k in C, row entry 0 is the diagonal or \&'loop\&' value of column k in
I \fIafter\fP expansion and pruning, and \fIbefore\fP inflation and
rescaling\&. Entry 1 is the loop value \fIafter\fP inflation and rescaling\&.
Entry 2 is the center of column k (the sum of its entries squared)
computed \fIafter\fP expansion and \fIbefore\fP pruning, entry 3 is the
maximum value found in that column at the same time\&. Entry 4 is the
amount of mass kept for that column \fIafter pruning\fP\&.

The \fB-ds\fP option sets the stem for file names of dumped
objects (default \fImcl\fP)\&. The \fB-di\fP and \fB-dm\fP
options allow a selection of iterands to be made\&.
.in -3m

.ZI 3m "\fB-digits\fP n (\fIprinting precision\fP)"
\&
.br
This has two completely different uses\&. It sets
the number of decimals used for pretty-printing \fBmcl\fP iterands
when using the \fB--show\fP option (see below),
and it sets the number of decimals used for writing
the expanded matrix when using the
\fB--expand-only\fP option\&.
.in -3m

.ZI 3m "\fB--show\fP (\fIprint matrices to screen\fP)"
\&
.br
Print matrices to screen\&. The number of significant digits to be
printed can be tuned with \fB-digits\fP\ \fIn\fP\&. An 80-column screen
allows graphs (matrices) of size up to 12(x12) to be printed with
three digits precision (behind the comma), and of size up to 14(x14)
with two digits\&. This can give you an idea of how \fBmcl\fP operates,
and what the effect of pruning is\&.
Use e\&.g\&. \fB-S\fP\ \fB6\fP for such
a small graph and view the MCL matrix iterands with \fB--show\fP\&.
.in -3m

.ZI 3m "\fB-sort\fP str (\fIsort mode\fP)"
\&
.br
\fIstr\fP can be one of \fBlex\fP, \fBsize\fP, \fBrevsize\fP,
or \fBnone\fP\&. The default is \&'revsize\&', in which the largest
clusters come first\&. If the mode is \&'size\&', smallest clusters
come first, if the mode is \&'lex\&', clusters are ordered
lexicographically, and if the mode is \&'none\&', the order
is the same as produced by the procedure used by mcl to
map matrices onto clusterings\&.
.in -3m

.ZI 3m "\fB--keep-overlap\fP y/n (\fIretain overlap\fP)"
\&
.br
The \fBkeep-overlap\fP action causes mcl to retain overlap
should this improbable event occur\&. In theory, \fBmcl\fP may generate a
clustering that contains overlap, although this almost never happens
in practice, as it requires some particular type of symmetry to
be present in the input graph (not just any symmetry will do)\&.
Mathematically speaking, this is a conjecture and not a theorem, but the
present author wil eat his shoe if it fails to be true (for marzipan values of
shoe)\&. It is easy though to construct an input graph for which certain mcl
settings result in overlap - for example a line graph on an odd number of
nodes\&. The default is to remove overlap should it occur\&.

This option has more than theoretical use because \fBmcl\fP is able
to generate clusterings associated with intermediate iterands\&.
For these clusterings, overlap is more than a theoretical
possibility, and will often occur\&. If you specify
the \fB-L\fP\ \fIk\fP option, mcl will output the
clustering associated with the last iterand computed, and
it may well contain overlap\&.

This option has no effect on the clusterings that are
output when using \fB-dump\fP\ \fIcls\fP -
the default for those is that overlap is not touched,
and this default can not yet be overridden\&.
.in -3m

.ZI 3m "\fB--force-connected\fP=y/n (\fIanalyze components\fP)"
\&
'in -3m
.ZI 3m "\fB--check-connected\fP=y/n (\fIanalyze components\fP)"
\&
'in -3m
'in +3m
\&
.br
If the input graph has strong bipartite characteristics,
mcl may yield clusters that do not correspond to connected
components in the input graph\&. Turn one of these modes on to
analyze the resultant clustering\&.

If loose clusters are found
they will be split into subclusters corresponding to
connected components\&.
With \fB--force-connected\fP=\fIy\fP mcl will write the
corrected clustering to the normal output file, and the old clustering
to the same file with suffix \fCorig\fR\&.
With \fB--check-connected\fP=\fIy\fP mcl will write the
loose clustering to the normal output file, and the corrected clustering
to the same file with suffix \fCcoco\fR\&.

These options are not on by default, as the analysis
is currently (overly) time-consuming
and mcl\&'s behaviour actually makes some sense
(when taking bipartite characteristics into account)\&.
.in -3m

.ZI 3m "\fB--output-limit\fP=y/n (\fIwrite limit matrix\fP)"
\&
.br
This will write the limit matrix to a file named
\fBbase\fP-limit\&.
.in -3m

.ZI 3m "\fB--analyze\fP=y/n (\fIperformance criteria\fP)"
\&
.br
With this mode turned on, \fBmcl\fP will reread the input matrix
and compute a few performance criteria and attach them to
the output file\&. Off by default\&.
.in -3m

.ZI 3m "\fB--append-log\fP=y/n (\fIappend log\fP)"
\&
.br
Appends a log with the process characteristics to the output file\&.
By default, this mode is on\&.
.in -3m

.ZI 3m "\fB--show-log\fP=y/n (\fIshow log\fP)"
\&
.br
Shows the log with process characteristics on STDOUT\&.
By default, this mode is off\&.
.in -3m

.ZI 3m "\fB--inflate-first\fP (\fIrather then expand\fP)"
\&
.br
Normally, \fBmcl\fP will take the input graph/matrix, make it stochastic, and
start computing an mcl process, where expansion and inflation are
alternated\&. This option changes that to alternation of inflation and
expansion, i\&.e\&. inflation is the first operator to be applied\&. This is
intended for use with an input matrix that was generated with the
\fB--expand-only\fP option (see below)\&.
If you do multiple mcl runs for the same graph, then the first step will
be the same for all runs, namely computing the square of the input
matrix\&. With the pair of \fB--inflate-first\fP and
\fB--expand-only\fP this bit of computing can be factored out\&.
\fBNOTE\fP this option assumes that the input matrix is stochastic
(as it will be when generated with \fB--expand-only\fP)\&.
The \fB--inflate-first\fP option renders all options useless that will
otherwise affect the input matrix, and precisely these options \fIdo\fP
affect the matrix resulting from using \fB--expand-only\fP\&. See the
entry below for more information\&.
.in -3m

.ZI 3m "\fB--expand-only\fP (\fIfactor out computation\fP)"
\&
.br
This option makes \fBmcl\fP compute just the square of the input graph/matrix,
and write it to the file name supplied with the \fB-o\fP flag, or to
the default file named out\&.mce\&. \fBNOTE\fP in this case the output matrix
is \fInot\fP a clustering\&. The intended use is that the output matrix is
used as input for mcl with the \fB--inflate-first\fP switch turned
on, so that multiple mcl runs need not redo the same computation (the
first expansion step)\&.

Note that the \fB-scheme\fP parameters affect the
matrix computed with \fB--expand-only\fP\&. Other options that affect
the matrix resulting from this option:
\fB-pp\fP, \fB-c\fP,
and \fB-digits\fP\&. The latter option
sets the precision for output in native ascii format\&.
.in -3m

.ZI 3m "\fB-in-gq\fP f (\fIfilter threshold\fP)"
\&
.br
mcl will remove any edges in the input graph (equivalently, entries in
the input matrix) for which the weight is below\ \fIf\fP\&.
.in -3m

.ZI 3m "\fB-pp\fP n (\fIpreprune count\fP)"
\&
.br
For each column vector (node) in the input matrix (graph) \fBmcl\fP will
keep the n entries (outgoing edges) of that vector (node) that
have largest weight and remove the rest\&.
.in -3m

.ZI 3m "\fB--jury-charter\fP (\fIexplains jury\fP)"
\&
.br
Explains how the jury synopsis is computed from the jury marks\&.
.in -3m

.ZI 3m "\fB--version\fP (\fIshow version\fP)"
\&
.br
Show version\&.
.in -3m

.ZI 3m "\fB-how-much-ram\fP n (\fIRAM upper bound\fP)"
\&
.br
\fBn\fP is interpreted as the number of nodes of an input graph\&.
mcl will print the maximum amount of RAM it needs for its computations\&.
The formula for this number in bytes is:

.di ZV
.in 0
.nf \fC
   2 * c * k * n

   2  :  two matrices are concurrently held in memory\&.
   c  :  mcl cell size (as shown by -z)\&.
   n  :  graph cardinality (number of nodes)\&.
   k  :  MAX(s, r)\&.
   s  :  select number (-S, -scheme options)\&.
   r  :  recover number (-R, -scheme options)\&.
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

This estimate will usually be too pessimistic\&. It does assume though that
the average node degree of the input graph does not exceed k\&. The
\fB-how-much-ram\fP option takes other command-line arguments into
account (such as \fB-S\fP and \fB-R\fP), and it expresses the
amount of RAM in megabyte units\&.
.in -3m

.ZI 3m "\fB-h\fP (\fIshow help\fP)"
\&
.br
Shows a selection of the most important \fBmcl\fP options\&.
.in -3m

.ZI 3m "\fB--apropos\fP (\fIshow help\fP)"
\&
.br
Gives a one-line description for all options\&.
.in -3m

.ZI 3m "\fB--show-settings\fP (\fIshow settings\fP)"
\&
.br
A synonym for the \fB-z\fP option\&.
.in -3m

.ZI 3m "\fB-z\fP (\fIshow settings\fP)"
\&
.br
Show current settings for tunable parameters\&.
\fB--show-settings\fP is a synonym\&.
.in -3m
.SH PRUNING OPTIONS

.ZI 3m "\fB-p\fP f (\fIcutoff\fP)"
\&
'in -3m
.ZI 3m "\fB-P\fP n (\fI1/cutoff\fP)"
\&
'in -3m
.ZI 3m "\fB-S\fP s (\fIselection number\fP)"
\&
'in -3m
.ZI 3m "\fB-R\fP r (\fIrecover number\fP)"
\&
'in -3m
.ZI 3m "\fB-pct\fP pct (\fIrecover percentage\fP)"
\&
'in -3m
.ZI 3m "\fB-my-scheme\fP n (\fItag custom scheme\fP)"
\&
'in -3m
'in +3m
\&
.br
After computing a new (column stochastic) matrix vector during expansion
(which is matrix multiplication c\&.q\&. squaring), the vector is
successively exposed to different pruning strategies\&. The intent of
pruning is that many small entries are removed while retaining much of
the stochastic mass of the original vector\&. After pruning, vectors are
rescaled to be stochastic again\&. MCL iterands are theoretically known to
be sparse in a weighted sense, and this manoever effectively perturbs the
MCL process a little in order to obtain matrices that are genuinely
sparse, thus keeping the computation tractable\&. An example of monitoring
pruning can be found in the discussion of
\fB-v\fP\ \fBpruning\fP
at the end of this section\&.

\fBmcl\fP proceeds as follows\&. First, entries that are smaller than
\fIcutoff\fP are removed, resulting in a vector with at most
\fI1/cutoff\fP entries\&. The cutoff can be supplied either by
\fB-p\fP, or as the inverse value by \fB-P\fP\&. The latter is more
intuitive, if your intuition is like mine (and the P stands for precision
or pruning by the way)\&.
The cutoff just described is rigid; it is the same for all vectors\&. The
\fB--adapt\fP option causes the computation of a
cutoff that depends on a vector\&'s homogeneity properties, and this option
may or may not speed up mcl\&.

Second, if the remaining stochastic mass (i\&.e\&. the sum of all remaining
entries) is less than \fIpct\fP/100 and the number of remaining
entries is less than \fIr\fP (as specified by the \fB-R\fP flag),
\fBmcl\fP will try to regain ground by recovering the largest discarded
entries\&. The total number of entries is not allowed to grow larger than
\fIr\fP\&.
If recovery was not necessary, mcl tries to prune the vector further
down to at most \fIs\fP entries (if applicable), as specified by the
\fB-S\fP flag\&. If this results in a vector that satisfies the recovery
condition then recovery is attempted, exactly as described above\&. The
latter will not occur of course if \fIr\fP <= \fIs\fP\&.

The default setting is something like \fB-P\fP\ \fB4000\fP \fB-S\fP\ \fB500\fP
\fB-R\fP\ \fB600\fP\&. Check the \fB-z\fP flag to be sure\&. There is a set
of precomposed settings, which can be triggered with the
\fB-scheme\fP\ \fIk\fP option\&. \fIk\fP=4 is the default
scheme; higher values for \fIk\fP result in costlier and more accurate
computations (vice versa for lower, cheaper, and less accurate)\&.
The schemes are listed using the \fB--show-schemes\fP option\&. It is
advisable to use the \fB-scheme\fP option only in interactive mode,
and to use the explicit expressions when doing batch processing\&. The
reason is that there is \fIno guarantee whatsoever\fP that the schemes
will not change between different releases\&. This is because the scheme
options should reflect good general purpose settings, and it may become
appararent that other schemes are better\&.

Note that \&'less accurate\&' or \&'more accurate\&' computations may still
generate the same output clusterings\&. Use \fBclmdist\fP to compare output
clusterings for different resource parameters\&. Refer to \fBclmdist\fP
for a discussion of this issue\&.

The \fB-my-scheme\fP\ \fBn\fP option sets a tag that is used in constructing
the default output naming file\&. If not used, \fBmcl\fP will create
a relatively long string describing the settings of the
\fB-P\fP, \fB-pct\fP, \fB-R\fP, and \fB-S\fP parameters,
e\&.g\&. \fBP600Q85R1000S1200\fP (where \fBQ\fP tags the \fIpct\fP setting)\&.
If used, mcl will simply use the tag \fBs\fP\fIn\fP\&.
.in -3m

.ZI 3m "\fB-warn-pct\fP k (\fIprune warn percentage\fP)"
\&
'in -3m
.ZI 3m "\fB-warn-factor\fP k (\fIprune warn factor\fP)"
\&
'in -3m
'in +3m
\&
.br
The two options \fB-warn-pct\fP and \fB-warn-factor\fP relate to
warnings that may be triggered once the \fIinitial\fP pruning of a vector
is completed\&. The idea is to issue warnings if initial pruning almost
completely destroys a computed vector, as this may be a sign that the
pruning parameters should be changed\&. It depends on the mass remaining
after initial pruning whether a warning will be issued\&. If that mass is
less than \fIwarn-pct\fP or if the number of remaining entries is smaller
by a factor \fIwarn-factor\fP than both the number of entries originally
computed \fIand\fP the recovery number, in that case, \fBmcl\fP will issue a
warning\&.

\fB-warn-pct\fP takes an integer between 0 and 100 as parameter,
\fB-warn-factor\fP takes a real positive number\&. They default to
something like 30 and 50\&.0\&. If you want to see less warnings, decrease
\fIwarn-pct\fP and increase \fIwarn-factor\fP\&. Set \fIwarn-factor\fP to zero
if you want no warnings\&.
.in -3m

.ZI 3m "\fB--dense\fP (\fIallow matrices to fill\fP)"
\&
.br
This renders all pruning options useless except for one\&. After each
expansion step, \fBmcl\fP will remove all entries that are smaller than the
threshold specified by \fB-p\fP or \fB-P\fP, which acts like a
precision in this case\&. After removal, the matrix columns are rescaled
to be stochastic again\&.

If the \fB-p\fP threshold (precision) is zero or very small,
the \fB--dense\fP option results in a rather accurate and very
costly computation of the MCL process\&. Do not use this option
for graphs with more than several thousands of entries, or you will
have trouble digging your processor out of swap\&.
.in -3m

.ZI 3m "\fB--rigid\fP (\fIpruning\fP)"
\&
.br
See the \fB--adapt\fP option below\&.
.in -3m

.ZI 3m "\fB-ae\fP f (\fIadaptive pruning exponent\fP)"
\&
.br
See the \fB--adapt\fP option below\&.
.in -3m

.ZI 3m "\fB-af\fP f (\fIadaptive pruning factor\fP)"
\&
.br
See the \fB--adapt\fP option below\&.
.in -3m

.ZI 3m "\fB--adapt\fP (\fIpruning\fP)"
\&
.br
The default \fBmcl\fP pruning behaviour as described under
the \fB-P\fP option is called \fIrigid pruning\fP
(it being the default renders the switch \fB--rigid\fP
currently useless), refering to the fact that the first stage
of pruning removes entries smaller than a fixed threshold\&.
The options discussed here enable the computation of a threshold that
depends on the homogeneity characteristics of a vector\&. This behaviour is
triggered by supplying \fB--adapt\fP\&.

The \fB--adapt\fP behaviour only affects the first pruning stage, c\&.q\&.
the computation of the first threshold (see the discussion under the
\fB-P\fP option)\&. It does not interfere with either
selection or recovery\&. It is affected however by the threshold as
specified by the \fB-P\fP option\&. When using \fB--adapt\fP, you
typically use the \fB-P\fP option as well, and you can and should use
a higher value then you would without using \fB--adapt\fP\&.

All that said, \fB--adapt\fP triggers this behaviour: Given a
stochastic vector v, its mass center of order two is computed,
which is the sum of each entry squared\&. The mass center of v,
call it c, is strongly related to its homogeneity properties
(see \fBREFERENCES\fP)\&. The threshold T is computed as 1/f *
pow(c, e), where e and f are the arguments to the \fB-af\fP\ \fIf\fP
and \fB-ae\fP\ \fIe\fP options respectively (check \fB-z\fP
for the respective defaults)\&.
For either e or f decreasing it means that T becomes larger\&.
\fIFinally, T is maxed with the rigid threshold value\fP, which
can be altered using either \fB-p\fP\ \fIf\fP or \fB-P\fP\ \fIn\fP\&.
The latter is why you should increase the \fB-P\fP parameter n
(so that the rigid threshold is decreased) once you switch to
adaptive pruning\&. The adaptive threshold should be the main factor
controlling pruning, with the rigid threshold acting as a safeguard
that does not take over too often\&.

This may seem complicated, but the rules are actually quite simple, and
you may just disregard the definition of T\&. The usefulness of these
options will vary\&. If you want to speed up \fBmcl\fP, try it out
and add \fB--adapt\fP to your settings\&.
.in -3m

.ZI 3m "\fB--thick\fP (\fIexpect dense input graph\fP)"
\&
.br
This option is somewhat esoteric\&. It does not affect the matrices as
computed by \fBmcl\fP, but it affects the way in which they are computed\&. If
the input graph is very dense, this may speed up mcl a little\&.
.in -3m

.ZI 3m "\fB-v\fP\ \fBpruning\fP"
\&
.br
Pruning verbosity mode causes \fBmcl\fP to emit several statistics related to
the pruning process, each of which is described below\&. Use
\fB-v\fP\ \fBexplain\fP to get explanatory headers in the output as well
(or simply use \fB-v\fP\ \fBall\fP)\&.

\fBSelection and recovery\fP
.br
The number of selections and recoveries \fBmcl\fP had to perform during each
iteration is shown\&. It also shows the number of vectors for which the
mass after final pruning was below the fraction defined by the
\fB-pct\fP option as a percentage (default probably 90
or 95)\&.

\fBInitial and pruned vector footprint distributions\fP
.br
The distribution of the vector footprints (i\&.e\&. the number of nonzero
entries) before and after pruning is shown\&. This is assembled in a terse
(horrid if you will) format, looking as follows (with some context
stripped, noting that the data for three expansion steps is shown):

.di ZV
.in 0
.nf \fC
----------------------------------------------------
 mass percentages  | distr of vec footprints       |
         |         |____ expand ___\&.____ prune ____|
  prune  | final   |e4   e3   e2   |e4  e3   e2    |
all ny nx|all ny nx|8532c8532c8532c|8532c8532c8532c|
---------\&.---------\&.---------------\&.---------\&.-----\&.
 98 88 86  98 91 86 _________022456 ___________0234
 98 89 86  98 94 91 _______00245678 ___________0234
 98 90 89  99 95 94 _______00235568 ___________0234
 \&.\&.\&.
.fi \fR
.in
.di
.ne \n(dnu
.nf \fC
.ZV
.fi \fR

This particular output was generated (and truncated after three rounds of
expansion and inflation) from clustering a protein graph on 9058 nodes
with settings \fB-I\fP\ \fB1\&.4\fP, \fB-P\fP\ \fB2000\fP, \fB-S\fP\ \fB500\fP,
\fB-R\fP\ \fB600\fP, and \fB-pct\fP\ \fB95\fP\&.

The header entries 8532c85\&.\&. indicate thresholds going from 80000, 50000,
20000, 12500, 8000, all the way down to 300, 200, and 125\&. The character
\&'c\&' signifies the base 1\&.25 (for no apparent reason)\&. The second entry
\&'2\&' (after \&'0\&') on the first line signifies that roughly 20 percent of
all the vectors had footprint (#nonzero entries) between 800 and 1250\&.
Likewise, 40 percent had footprint between 300 and 500\&. The \&'0\&' entries
signify a fraction somewhere below 5 percent, and the \&'@\&' entries signify
a fraction somewhere above 95 percent\&.

Two columns are listed, one for the expansion vector footprints
(i\&.e\&. after squaring), and the other for the vector
footprints \fIright after initial pruning took place\fP (i\&.e\&. before
selection and recovery, after either adaptive or rigid pruning)\&.
This may give an idea of the soundness of the initial pruning
process (overly severe, or overly mild), and the extent
to which you want to apply selection and/or recovery\&.

\fBInitial and final mass windows\fP
.br
The mass averages of the pruned vectors after the first selection
stage are shown, and the mass averages of the vectors as \fIfinally
computed\fP, i\&.e\&. after selection and recovery\&. Note that the latter
corresponds to a different stage than what is shown for the vector
footprints, if either selection or recovery is turned on\&.
For both cases, three averages are shown: the average over all vectors,
the average over the worst x cases, and the average over the worst y
cases\&. The mass averages are shown as percentages: \&'98\&' on the first
line under the \&'prune/all\&' column means that overall 98 percent of the
stochastic mass of the matrix was kept after pruning\&.

This example demonstrates that many entries could be
removed while retaining much of the stochastic mass\&. The effect of the
recovery (\fB-R\fP) parameter is also clear: the final averages are
higher than the initial averages, as a result of \fBmcl\fP undoing some
overenthousiastic pruning\&.

An average over the worst k cases is called a window of width k;
internally, \fBmcl\fP tracks many more such windows\&. The result of this can
be seen when using the \fB--append-log\fP=\fBy\fP option
(which appends a log to the cluster output) or the
\fB--show-log\fP=\fBy\fP option
(which sends the log to STDOUT)\&.
From a fixed set of windows those that are applicable are tracked, that
is, all those windows for which the width does not exceed the graph
cardinality\&. The windows in the fixed set have respective sizes 1, 2, 5,
10, 20, 50, and so on up until 5000000 (which makes 15 windows in all)\&.
.in -3m

.ZI 3m "\fB-nx\fP i (\fIx window index\fP)"
\&
'in -3m
.ZI 3m "\fB-ny\fP j (\fIy window index\fP)"
\&
'in -3m
'in +3m
\&
.br
The options \fB-nx\fP and \fB-ny\fP
both take an index in the range 1\&.\&.15\&. The default values
for \fB-nx\fP and \fB-ny\fP are respectively 4 and 7,
denoting the fourth and seventh window of respective widths
10 and 100\&. They are used in the verbosity output as
described above\&.
.in -3m

.ZI 3m "\fB-nj\fP i (\fIjury window index\fP)"
\&
.br
The \fB-nj\fP denotes a window index in the same way as \fB-nx\fP
and \fB-ny\fP do\&. This particular window is used for computing the
\fIjury marks\fP, which are the three number reported by \fBmcl\fP when it is
done\&. They are a reminder of the existence of pruning and its importance
for both speed and accuracy, and they are \fIindicative rather than
authorative\fP\&.

These jury marks are simply the respective mass averages in the jury
window for the first three iterations\&. The marks are even further
simplified and mapped to the jury synopsis, which is a single grade
expressed as an adjective\&. The grades are, in decreasing order of
achievement, \fIperfect exceptional superior excellent good acceptable
mediocre poor bad lousy miserable awful wretched atrocious\fP\&. Doing \&'mcl
--jury-charter\&' will tell you how the jury marks map onto the jury
synopsis\&.

The jury marks should preferably be higher than 70\&. If they are in the
vicinity of 80 or 90, \fBmcl\fP is doing fine as far as pruning is concerned\&.
Choose a higher scheme if you think them too low\&. For very dense graphs
that do have strong cluster structure, the jury marks can sink as low as
to the 30\&'s and 40\&'s, but the clusterings generated by mcl may still be
good\&. The marks and the synopsis grade the severity of pruning, not
cluster quality\&. Note that the jury becomes friendlier, resp\&. harsher
when the \fB-nj\fP option is increased/decreased\&.
.in -3m

.ZI 3m "\fB-nw\fP w (\fInr of windows\fP)"
\&
.br
Normally, \fBmcl\fP will use all windows that have width smaller
than the cardinality of the input graph\&. This option limits
the set of windows to those w windows of smallest width\&.
This affects the output when setting
\fB--append-log\fP=\fBy\fP output\&.
.in -3m

.ZI 3m "\fB-nl\fP l (\fInumber of iterations\fP)"
\&
.br
By default, \fBmcl\fP will log the window mass averages for the first ten
iterations\&. This options sets that number to\ \fBl\fP\&.
It affects the \fB--append-log\fP=\fBy\fP output\&.
.in -3m
.SH PIPELINES

In general, clustering requires several stages; creating the matrix,
running mcl, and displaying the result\&. The display stage is supported
by \fBclmformat\fP\&. The matrix creation stage often needs only be
done once for a given data collection, followed by repeated runs of
the other two stages for varying inflation values and scheme settings\&.

The matrix creation stage can often be split up in two more stages,
namely parsing a data file in some given format, and assembling a
matrix from the data bits and pieces, such as node indices and edge
weights or even edge weight contributions\&.
The assembly step can be done by \fBmcxassemble\fP,
which allows a very general input format and customizable behaviour
in how the bits and pieces should be transformed to the input graph\&.
This leaves the parse stage to be filled in\&.

The \fBmclpipeline script\fP implements a generic and
customizable pipeline encapsulating the four stages distinguished
here (parsing, assembly, clustering, display)\&. It is possible to
let only part of the pipeline be active, and many other features are
supported\&. The IO mechanism is entirely file based, and files are
associated with parametrizations via file name extensions (by all
means a simple mechanism)\&.

\fBmclpipeline\fP requires a single parse script to be specified\&.
It will be plugged into the pipeline and you should be set to run\&.
The parse script must satisfy the interface requirements described
in the \fBmclpipeline manual page\fP\&.

For BLAST input, the \fBmclblastline
script\fP provides a dedicated interface\&. It uses the
\fBmcxdeblast script\fP that comes prepackaged with mcl\&.
.SH APPLICABILITY

\fBmcl\fP will work very well for graphs in which the diameter of the natural
clusters is not too large\&. The presence of many edges between different
clusters is not problematic; as long as there is cluster structure, mcl
will find it\&. It is less likely to work well for graphs with clusters
(inducing subgraphs) of large diameter, e\&.g\&. grid-like graphs derived from
Euclidean data\&. So mcl in its canonical form is certainly not fit for
boundary detection or image segmentation\&. I experimented with a modified
mcl and boundary detection in the thesis pointed to below (see
\fBREFERENCES\fP)\&. This was fun and not entirely unsuccesful, but not
something to be pursued further\&.

\fBmcl\fP likes \fIundirected input graphs best\fP, and it really dislikes graphs
with node pairs (i,j) for which an arc going from i to j is present and the
counter-arc from j to i is absent\&. Try to make your input graph undirected\&.
Furthermore, mcl interprets edge weights in graphs as similarities\&. If you
are used to working with dissimilarities, you will have to convert those to
similarities using some conversion formula\&. The most important thing is
that you feel confident that the similarities are reasonable, i\&.e\&. if X is
similar to Y with weight 2, and X is similar to Z with weight 200, then this
should mean that the similarity of Y (to X) is neglectible compared with the
similarity of Z (to X)\&.

\fBmcl\fP is probably not suited for clustering \fItree graphs\fP\&. This is because
mcl works best if there are multiple paths between different nodes in the
natural clusters, but in tree graphs there is only one path between any pair
of nodes\&. Trees are too sparse a structure for mcl to work on\&.

\fBmcl\fP may well be suited for clustering \fIlattices\fP\&. It will depend
on the density characteristics of the lattice, and the conditions for
success are the same as those for clustering graphs in general: The
diameter of the natural clusters should not be too large\&.
\fBNOTE\fP when clustering a lattice, you \fIhave\fP to cluster
the underlying undirected graph, and not the directed graph that represents
the lattice itself\&. The reason is that one has to allow mcl (or any other
cluster algorithm) to \&'look back in time\&', so to speak\&. Clustering and
directionality bite each other (long discussion omitted)\&.

\fBmcl\fP has a worst-case time complexity O(N*k^2), where N is the number of
nodes in the graph, and k is the maximum number of neighbours tracked during
computations\&. k depends on the \fB-P\fP and \fB-S\fP options\&. If the
\fB-S\fP option is used (which is the default setting) then k equals the
value corresponding with this option\&. Typical values for k are in the range
500\&.\&.1000\&. The average case is much better than the worst case though, as
cluster structure itself has the effect of helping mcl\&'s pruning schemes,
certainly if the diameter of natural clusters is not large\&.
.SH FILES

There are currently no resource nor configuration files\&.
The mcl matrix format is described in the \fBmcxio(5)\fP section\&.
.SH ENVIRONMENT

.ZI 3m "MCLXASCIIDIGITS"
\&
.br
When writing matrices in ascii format, mcl will use the environment
variable MCLXASCIIDIGITS (if present) as the precision (number of digits)
for printing the fractional part of values\&.
.in -3m

.ZI 3m "MCLXIOVERBOSITY"
\&
.br
MCL and its sibling applications will usually report about matrix
input/output from/to disk\&. The verbosity level can be regulated
via MCLXIOVERBOSITY\&. These are the levels it can currently be set to\&.

.ZJ 2m 2m "1"
Silent but applications may alter this\&.
.in -4m
.ZJ 2m 2m "2"
Silent and applications can not alter this\&.
.in -4m
.ZJ 2m 2m "4"
Verbose but applications may alter this\&.
.in -4m
.ZJ 2m 2m "8"
Verbose and applications can not alter this (default)\&.
.in -4m
.in -3m

.ZI 3m "MCLXIOFORMAT"
\&
.br
MCL and its sibling applications will by default output matrices
in ASCII format rather than binary format (cf\&. \fBmcxio(5)\fP)\&.
The desired format can be controlled via the variable
MCLXIOFORMAT\&. These are the levels it can currently be set to\&.

.ZJ 2m 2m "1"
Ascii format but applications may alter this\&.
.in -4m
.ZJ 2m 2m "2"
Ascii format and applications can not alter this (default)\&.
.in -4m
.ZJ 2m 2m "4"
Binary format but applications may alter this\&.
.in -4m
.ZJ 2m 2m "8"
Binary format and applications can not alter this\&.
.in -4m
.in -3m

.ZI 3m "MCLXASCIIFLAGS"
\&
.br
If matrices are output in ascii format, by default empty vectors
will not be listed\&. Equivalently (during input time),
vectors for which no listing is present are understood to be empty -
note that the \fIpresence\fP of a vector is established using
the domain information found in the header part\&.
It is possible to enforce listing of empty vectors by
setting bit \&'1\&' in the variable MCLXASCIIFLAGS\&.
.in -3m
.SH DIAGNOSTICS

If \fBmcl\fP issues a diagnostic error, it will most likely be
because the input matrix could not be parsed succesfully\&.
\fBmcl\fP tries to be helpful in describing the kind of parse error\&.
The mcl matrix format is described in the \fBmcxio(5)\fP section\&.
.SH BUGS

No known bugs at this time\&. Please send bug reports to mcl-devel@micans\&.org\&.
.SH AUTHOR

Stijn van Dongen\&.
.SH HISTORY/CREDITS

The MCL algorithm was conceived in spring 1996 by the present author\&.
The first implementation of the MCL algorithm followed that spring
and summer\&. It was written in Perl and proved the viability of
the algorithm\&. The implementation described here began its life in
autumn 1997\&. The first versions of the vital matrix library
were designed jointly by Stijn van Dongen and Annius Groenink in
the period Oktober 1997 - May 1999\&. The efficient matrix-vector
multiplication routine was written by Annius\&. This routine is
without significant changes still one of the cornerstones of this
MCL implementation\&.

Since May 1999 all MCL libraries have seen much development and
redesign by the present author\&. Matrix-matrix multiplication has been
rewritten several times to take full advantage of the sparseness
properties of the stochastic matrices brought forth by the MCL
algorithm\&. This mostly concerns the issue of pruning \- removal of
small elements in a stochastic column in order to keep matrices
sparse\&.

Very instructive was that around April 2001 Rob Koopman pointed out
that selecting the k largest elements out of a collection of n is
best done using a min-heap\&. This was the key to the second major
rewrite (now counting three) of the MCL pruning schemes, resulting in
much faster code, generally producing a more accurate computation of
the MCL process\&.

In May 2001 Anton Enright initiated the parallellization of the
\fBmcl\fP code and threaded inflation\&. From this example, Stijn threaded
expansion\&. This was great, as the MCL data structures and operands
(normal matrix multiplication and Hadamard multiplication) just beg
for parallellization\&.

In Jan 2003 the 03-010 release introduced support for sparsely
enumerated (i\&.e\&. indices need not be sequential) graphs and matrices, the
result of a major overhaul of the matrix library and most higher layers\&.
Conceptually, the library now sees matrices as infinite quadrants
of which only finite subsections happen to have nonzero entries\&.

Joost van Baal set up the mcl CVS tree and packaged mcl for Debian
GNU/Linux\&. He completely autotooled the sources, so much so that at first I
found it hard to find them back amidst bootstrap, aclocal\&.m4, depcomp, and
other beauties\&.

Jan van der Steen shared his elegant mempool code\&. Philip Lijnzaad gave
useful comments\&. Philip, Shawn Hoon, Abel Ureta-Vidal,
and Martin Mokrejs sent helpful bug reports\&.

Abel Ureta-Vidal and Dinakarpandian Deendayal commented on
and contributed to mcxdeblast and mcxassemble\&.

Tim Hughes contributed several good bug reports for mcxassemble,
mcxdeblast and zoem (a workhorse for clmformat)\&.
.SH SEE ALSO

\fBmclfaq(7)\fP - Frequently Asked Questions\&.

\fBmcxio(5)\fP - a description of the mcl matrix format\&.

There are many more utilities\&. Consult
\fBmclfamily(7)\fP for an overview of and links to all the documentation
and the utilities in the mcl family\&.

\fBmcl\fP development is discussed on \fCmcl-devel@lists\&.micans\&.org\fR,
(subscribtion) information is at
https://lists\&.micans\&.org:446/listinfo/mcl-devel , this list is
archived at https://lists\&.micans\&.org:446/pipermail/mcl-devel/\&.

mcl\&'s home at http://micans\&.org/mcl/\&.
.SH REFERENCES

Stijn van Dongen, \fIGraph Clustering by Flow Simulation\fP\&.
PhD thesis, University of Utrecht, May 2000\&.
.br
http://www\&.library\&.uu\&.nl/digiarchief/dip/diss/1895620/inhoud\&.htm

Stijn van Dongen\&. \fIA cluster algorithm for graphs\fP\&.
Technical Report INS-R0010, National Research Institute for Mathematics and
Computer Science in the Netherlands, Amsterdam, May 2000\&.
.br
http://www\&.cwi\&.nl/ftp/CWIreports/INS/INS-R0010\&.ps\&.Z

Stijn van Dongen\&. \fIA stochastic uncoupling process for graphs\fP\&.
Technical Report INS-R0011, National Research Institute for Mathematics and
Computer Science in the Netherlands, Amsterdam, May 2000\&.
.br
http://www\&.cwi\&.nl/ftp/CWIreports/INS/INS-R0011\&.ps\&.Z

Stijn van Dongen\&. \fIPerformance criteria for graph clustering and Markov
cluster experiments\fP\&. Technical Report INS-R0012, National Research
Institute for Mathematics and Computer Science in the Netherlands,
Amsterdam, May 2000\&.
.br
http://www\&.cwi\&.nl/ftp/CWIreports/INS/INS-R0012\&.ps\&.Z

Enright A\&.J\&., Van Dongen S\&., Ouzounis C\&.A\&.
\fIAn efficient algorithm for large-scale detection of protein families\fP,
Nucleic Acids Research 30(7):1575-1584 (2002)\&.
.SH NOTES

This page was generated from \fBZOEM\fP manual macros,
http://micans\&.org/zoem\&. Both html and roff pages can be created
from the same source without having to bother with all the usual conversion
problems, while keeping some level of sophistication in the typesetting\&.
