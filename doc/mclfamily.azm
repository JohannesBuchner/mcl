\import{mcx.zmm}

\set{"man::name"}{The\~MCL\~family}
\set{"man::html-title"}{The MCL family}
\set{"man::author"}{Stijn van Dongen}
\set{"man::section"}{7}

\"man::preamble"

\${html}{\"man::maketoc"}

\${html}{\sec{name}{NAME}}
\${roff}{\sec{*}{name}{NAME}}
\NAME{mclfamily}{a description of the mcl family of cluster applications.}

\par{
   \mcl is an implementation of the Markov Cluster Algorithm, aka MCL algoritm.
   It is described in the \sibref{mcl}{mcl manual}.
   Several other utilities are part of the MCL distribution. This manual pages
   gives an overview.}

\: A short overview is found in
\: \sibidx\${html}{, with links to their manual page}. This manual page
\: provides somewhat longer descriptions and points out various ways
\: of gaining insight, evaluating results, and implementing sanity checks,
\: using these utilities.

\begin{itemize}{{compact}{1}{contiguous}{1}{w1}{15}{f1}{7}}
\apply{_#2\!{{
      \switch{\1}{
         {skip}{\itemskip}
         {intermezzo}{\intermezzo{\2}}
         {\item{\1}\car{\2}}
      }
   }
}}{
   {\mysib{mcl}}{the cluster algorithm}
   {\mysib{mclfaq}}{MCL Frequently Asked Questions}
{skip}{}
   {\mysib{mcxio}}{the graph/matrix input/output format}
{skip}{}
   {\mysib{mcx}}{general graph/matrix tasks}
   {\mcxref{convert}}{convert between interchange/binary storage types}
   {\mcxref{diameter}}{compute diameter of a symmetric graph}
   {\mcxref{clcf}}{compute clustering coefficient}
   {\mcxref{ctty}}{compute betweenness centrality}
   {\mcxref{erdos}}{compute shortest paths in graphs}
   {\mcxref{q}}{compute simple graph statistics}
{skip}{}
   {\mysib{mcxassemble}}{create matrices from raw data}
   {\mysib{mcxdump}}{dump a matrix optionally with label substitions}
   {\mysib{mcxload}}{load label data into matrix and tab files}
   {\mysib{mcxarray}}{transform array data to MCL matrices}
   {\mysib{mcxmap}}{relabel indices in a graph/matrix}
   {\mysib{mcxrand}}{randomly remove, add, and perturb edge weights}
   {\mysib{mcxsubs}}{extracting submatrices in various ways}
   {\mysib{mcxi}}{general matrix operations}
{skip}{}
   {\mysib{clm}}{general graph-clustering related tasks}
   {\clmref{dist}}{compute split/join distance between clusterings}
   {\clmref{vol}}{derive node volatility scores from a set of clusterings}
   {\clmref{info}}{compute performance measure for clusterings}
   {\clmref{meet}}{compute intersection of clusterings}
   {\clmref{mate}}{find best matching clusters between clusterings}
   {\clmref{close}}{fetch connected components from graphs or subgraphs}
   {\clmref{imac}}{interpret MCL iterand/matrix as clustering}
   {\clmref{residue}}{extend subgraph clustering}
   {\clmref{order}}{reorder indices to represent blocks from different clusterings}
   {\mysib{clmformat}}{display clusters as html or txt files}
{skip}{}
   {\mysib{mclpipeline}}{parsing/assembly/clustering/display}
   {\mysib{mclblastline} \v{*}}{BLAST pipeline}
   {\mysib{mcxdeblast} \v{*}}{parse BLAST files}
}
\end{itemize}

\par{
   Entries marked \v{*} are not available if only a default
   install is done.}

\sec{description}{DESCRIPTION}

\par{
   \mysib{mcl} - the clustering program. Since the 05-314 release
   it has the ability to read in and cluster label input.}

\par{
   \mysib{mclfamily} - Frequently Asked Questions.}

\par{
   \mysib{mcxio} - a description of the mcl matrix format.}

\par{
   \mysib{mcxassemble} - assemble a matrix/graph from partial edge
   weight scores. Useful intermediate format to be used when transforming
   application specific data into an mcl input matrix.
   However, \mcl has now acquired the ability to read graphs directly
   from label input, removing the need for \mcxassemble in most cases.}

\par{
   \mysib{mcxdump} - dump matrices in a line-based format, optionally map
   indices to labels.  Either a node pair (matrix entry) or a node list
   (matrix row) is output per line.}

\par{
   \mysib{mcxload} - load matrices and tab files
   from a line-based ID1 ID2 format.
   It can load bipartite structures in which the two columns
   contain labels from different domains. It has many options
   to further symmetrize and transform the input.}

\par{
   \mysib{mcxarray} - transform array data to MCL matrices. The data
   may be of rectangular \v{M\~x\~N} type. Either an \v{M\~x\~M}
   or an \v{N\~x\~N} dimensional matrix can be made, by computing
   correlation scores between the vectors in one of the to domains.
   The Pearson correlation coefficient and the cosine are supported,
   and further tearing and pruning options can be applied.}

\par{
   \mysib{mcxmap} - relabel indices in a graph.}

\par{
   \mysib{mcxrand} - randomly remove, add, and perturb edge weights.
   }

\par{
   \mcxref{convert} - convert matrices from interchange mcl format to
   binary mcl format or vice versa.}

\par{
   \mcxref{diameter} - compute the diameter of a graph.}

\par{
   \mcxref{clcf} - compute the clustering coefficient of a graph.}

\par{
   \mysib{mcxi} - an interpreter for a stack language that enables
   interaction with the \mcl matrix libraries.  It can be used both from the
   command line and interactively, and supports a rich set of operations such
   as transposition, scaling, column scaling, multiplication, Hadamard powers
   and products, et cetera. The general aim is to provide handles for simple
   number and matrix arithmetic,
   and for graph, set, and clustering operations.  The following is
   a very simple example of implementing and using \mcl in this language.}

\verbatim{\:/
 2.0 .i def                    # define inflation value.
 /small lm                     # load matrix in file 'small'.
 dim id add                    # add identity matrix.
 st .x def                     # make stochastic, bind to x.
 { xpn .i infl vm } .mcl def   # define one mcl iteration.
 20 .x .mcl repeat             # iterate  20 times
 imac                          # interpret matrix as clustering.
 vm                            # view matrix (clustering).}

\car{
   One of the more interesting things that can be done is doing mcl runs
   with more complicated inflation profiles than the two-constant approach used
   in \mcl itself.}

\par{
   \mysib{mcxsubs} - compute a submatrix of a given matrix, where row
   and column index sets can be specified as lists of indices combined
   with list of clusters in a given clustering. Useful for inspecting
   local cluster structure.}

\par{
   \clmref{dist} - compute the split/join distance between two 
   partitions. The split/join distance is better suited for measuring partition
   similarity than the long-known equivalence mismatch coefficient. The former
   measures the number of node moves required to transform one partition into
   the other, the latter measures differences between volumes of edges of
   unions of complete graphs associated with partitions.}

\par{
   \clmref{info} - compute a performance measure saying how well
   a clustering captures the edge weights of the input graph. Useful
   for comparing different clusterings on the same graph, best used in
   conjunction with \clmref{dist} - because comparing clusterings at
   different levels of granularity should somewhat change the performance
   interpretation. The latter issue is discussed in the \clmref{dist}
   entry.}

\par{
   \clmref{meet} - compute the intersection of a set of clusterings,
   i.e. the largest clustering that is a subclustering of all. Useful
   for measuring the consistency of a set of different clusterings
   at supposedly different levels of granularity (in conjunction with \clmref{dist}).}

\par{
   \clmref{mate} - find best matching clusters between two different
   clusterings.}

\par{
   \clmref{close} - fetch connected components from graphs or subgraphs.}

\par{
   \clmref{imac} - interpret MCL iterands as clusterings. The clusterings
   associated with early iterands may contain overlap, should you be
   interested therein.}

\par{
   \clmref{residue} - extend a clustering of a subgraph onto a clustering
   of the larger graph.}

\par{
   \mysib{clmformat} - display clusters suitable for scrutinizing.}

\par{
   \clmref{order} - reorder indices to represent blocks from
   different clusterings.}

\par{
   \mysib{mclpipeline} - set up a pipeline from data parsing stage
   unto clustering format/display stage.}

\par{
   \mysib{mclblastline} - BLAST specific pipeline.}

\par{
   \mysib{mcxdeblast} - BLAST parser. Can be used to directly stream
   a graph into \mcl. Can also prepare input for mcxassemble
   or can be plugged into the heavy-weight mclblastline.}

\"man::postamble"

\sec{env}{ENVIRONMENT}

\'begin{itemize}{{compact}{0}{contiguous}{0}{align}{left}}
\item{MCXLOGTAG}
\car{
   An interface to the logging code used in much of the mcl libraries.}
\'end{itemize}

\done


